pipeline {
    agent any // Consider using agent labels for specific nodes

    environment {
        DOCKER_IMAGE = "ward-module"
        DOCKER_TAG = "v1.0"
        IMAGE_FULL_NAME = "${DOCKER_IMAGE}:${DOCKER_TAG}"
        DEPLOYMENT_NAME = "ward-module-deployment"
        CONTAINER_NAME = "ward-module"
        MINIKUBE_PATH = "/opt/homebrew/bin"
        DOCKER_PATH = "/usr/local/bin"
        // Path to Postman collection file in yogit initur Git repository
        POSTMAN_COLLECTION = "ward_collection.postman_collection.json"
    }

    stages {
        stage('Preparation') {
            steps {
                script {
                    // Adjust the PATH to ensure Docker and Minikube commands are accessible
                    env.PATH = "${env.DOCKER_PATH}:${env.MINIKUBE_PATH}:${env.PATH}"
                }
            }
        }

        stage('Testing: find syntax errors using eslint') {
            steps {
                script {
                    try {
                        // Run ESLint to lint your JavaScript code
                        sh 'npx eslint .'
                    } catch (err) {
                        // Handle ESLint errors (e.g., echo error message)
                        echo "ESLint found errors but pipeline will continue: ${err}"
                    }
                }
            }
        }

        stage('Testing: Postman module validation') {
            steps {
                script {
                    try {
                        sh "newman run ${POSTMAN_COLLECTION}"
                    } catch (Exception e) {
                        echo "Postman tests failed but build continues..."
                    }
                }
            }
        }

        stage('Building Docker Image') {
            steps {
                sh "docker build -t ${IMAGE_FULL_NAME} ."
            }
        }
      
        stage('Run Docker Container Locally') {
            steps {
                script {
                    // Step 1: Stop existing Docker container
                    sh label: 'Stop Existing Container', script: "docker stop ${CONTAINER_NAME} || true"
                    
                    // Step 2: Remove existing Docker container
                    sh label: 'Remove Existing Container', script: "docker rm ${CONTAINER_NAME} || true"
                    
                    // Step 3: Run new Docker container
                    sh label: 'Run New Container', script: "docker run -d --name ${CONTAINER_NAME} -p 3000:9191 ${IMAGE_FULL_NAME}"
                }
            }
        }
      
        stage('Testing: Check Doker Image for vulnerability') {
            steps {
                snykSecurity(
                snykInstallation: 'Snyk_security',
                snykTokenId: 'Snyk_api_token',
                failOnError: false,
                failOnIssues: false,
                additionalArguments: "--severity-threshold=high"
                )
            }
            }
        stage('Transfer Image to Minikube') {
            steps {
                script {
                    sh "minikube -p minikube docker-env" 

                    sh "docker save ${IMAGE_FULL_NAME} > image.tar" 
                    // Load the image into Minikube's Docker environment
                    sh "minikube -p minikube image load image.tar"

                    // Clean up the tar file after loading
                    sh "rm image.tar"
                }
            }
        }

        stage('Deploying to Minikube') {
            steps {
                script {
                    // Ensure kubectl is using Minikube's Docker environment
                    sh 'minikube -p minikube docker-env'
                    
                    // Check if the deployment exists
                    def deploymentExists = sh(script: "kubectl get deployment ${DEPLOYMENT_NAME}", returnStatus: true) == 0

                    if (deploymentExists) {
                        // Update the deployment to use the new Docker image
                        sh "kubectl set image deployment/${DEPLOYMENT_NAME} ${CONTAINER_NAME}=${IMAGE_FULL_NAME}"
                        
                        // Restart the pods
                        sh "kubectl rollout restart deployment/${DEPLOYMENT_NAME}"
                    } else {
                        // Apply the deployment and service YAML files
                        sh "kubectl apply -f deployment.yaml -f service.yaml"
                    }
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                script {
                    // Check the rollout status of the deployment. This command waits until the deployment is done or fails.
                    sh "kubectl rollout status deployment/${DEPLOYMENT_NAME}"
                    
                    // After checking the rollout status, list the pods with a specific label to see their current status.
                    sh "kubectl get pods --selector=app=${CONTAINER_NAME}"
                }
            }
        }
    }
}
